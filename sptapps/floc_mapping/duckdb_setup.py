"""
Copyright 2023 Stephen Tetley

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

"""


import duckdb

## Setup tables initially (ddl is autogenerated from examples)

def setup_views(*, con: duckdb.DuckDBPyConnection) -> None:
    con.execute('CREATE SCHEMA IF NOT EXISTS s4_sai_mapping;')
    con.execute(vw_s4_level1_worklist_ddl)
    con.execute(vw_s4_level1_kids_ddl)
    con.execute(vw_level1_mapping_ddl)
    con.execute(vw_ai2_installation_type_codes_ddl)
    con.execute(vw_ai2_level1_kids_ddl)
    con.execute(vw_level1_parent_child_results_ddl)
    con.execute(vw_level1_children_report_ddl)

vw_s4_level1_worklist_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_s4_level1_worklist AS 
    SELECT *
    FROM (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY t1.functional_location) AS row_number
    FROM sai_raw_data.s4_level_1_2 t1
    ) t
    WHERE t.row_number = 1
    AND t.functloccategory = 1
"""

vw_level1_mapping_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_level1_mapping AS 
    SELECT DISTINCT 
        t.ai2_sitereference AS ai2_site_id,
        t.site_name AS ai2_site_name,
        t.s_4_hana_floc_lvl1_code AS s4_site_id,
        t.s_4_hana_floc_description AS s4_site_name,
    FROM sai_raw_data.site_mapping t;
"""

vw_ai2_installation_type_codes_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_ai2_installation_type_codes AS
    SELECT DISTINCT * FROM (
        (SELECT 
            t1.installationreference AS sai_num,
            t1.installationcommonname AS name,
            'INSTALLATION' AS inst_type,
            t1.installationtypecode AS type_code,
        FROM sai_raw_data.ai2_data t1
        WHERE t1.installationreference IS NOT NULL)
        UNION
        (SELECT 
            t2.subinstallationreference AS sai_num,
            t2.subinstallationcommonname AS name,
            'SUBINSTALLATION' AS inst_type,
            t2.subinstallationtypecode AS type_code,
        FROM sai_raw_data.ai2_data t2
        WHERE t2.subinstallationreference IS NOT NULL)
        UNION
        (SELECT 
            t2.sitereference AS sai_num,
            t2.sitecommonname AS name,
            'SITE' AS inst_type,
            'SITE' AS type_code,
        FROM sai_raw_data.ai2_data t2
        WHERE t2.sitereference IS NOT NULL)
    ) t
    ORDER BY t.sai_num;
"""
vw_ai2_level1_kids_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_ai2_level1_kids AS
    WITH cte_inst AS (
            SELECT DISTINCT
                t.sitereference AS ai2_site_id,
                mp.s4_site_id AS s4_site_name,
                t.sitecommonname AS site_common_name,
                t.installationreference AS child_id,
                t.installationcommonname AS child_name,
                t.installationstatus AS child_status,
                FROM sai_raw_data.ai2_data t
                JOIN s4_sai_mapping.vw_level1_mapping mp ON mp.ai2_site_id = t.sitereference),
        cte_subinst AS (
            SELECT DISTINCT
                t.sitereference AS ai2_site_id,
                mp.s4_site_id AS s4_site_name,
                t.sitecommonname AS site_common_name,
                t.subinstallationreference AS child_id,
                t.subinstallationcommonname AS child_name,
                t.subinstallationstatus AS child_status,
                FROM sai_raw_data.ai2_data t
                JOIN s4_sai_mapping.vw_level1_mapping mp ON mp.ai2_site_id = t.sitereference),      
        cte_site AS (
            SELECT DISTINCT
                t.sitereference AS ai2_site_id,
                mp.s4_site_id AS s4_site_name,
                t.sitecommonname AS site_common_name,
                t.sitereference AS child_id,
                t.sitecommonname AS child_name,
                'OPERATIONAL' AS child_status,
                FROM sai_raw_data.ai2_data t
                JOIN s4_sai_mapping.vw_level1_mapping mp ON mp.ai2_site_id = t.sitereference)            
    SELECT DISTINCT 
        t1.s4_site_name AS site_id,
        t1.site_common_name AS site_common_name,
        t1.child_id AS child_id,
        t1.child_name AS child_name,
        t1.child_status AS child_status,
        'INSTALLATION' AS child_type,
    FROM cte_inst t1
    WHERE 
        t1.ai2_site_id IS NOT NULL
    AND t1.child_id IS NOT NULL
    UNION
    SELECT DISTINCT 
        t2.s4_site_name AS site_id,
        t2.site_common_name AS site_common_name,
        t2.child_id AS child_id,
        t2.child_name AS child_name,
        t2.child_status AS child_status,
        'SUBINSTALLATION' AS child_type,
    FROM cte_subinst t2
    WHERE 
        t2.ai2_site_id IS NOT NULL
    AND t2.child_id IS NOT NULL
    UNION
    SELECT DISTINCT 
        t2.s4_site_name AS site_id,
        t2.site_common_name AS site_common_name,
        t2.child_id AS child_id,
        t2.child_name AS child_name,
        t2.child_status AS child_status,
        'SITE' AS child_type,
    FROM cte_site t2
    WHERE 
        t2.ai2_site_id IS NOT NULL
    AND t2.child_id IS NOT NULL
    ORDER BY site_id;
"""
vw_s4_level1_kids_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_s4_level1_kids AS
    SELECT DISTINCT 
        t.functional_location AS site_floc,
        t.description_of_functional_location AS site_description,
        t.ai2_aib_reference AS child_id,
    FROM sai_raw_data.s4_level_1_2 t
    WHERE t.functloccategory = 1
"""

vw_ai2_installation_type_codes_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_ai2_installation_type_codes AS
    SELECT DISTINCT * FROM (
        (SELECT 
            t1.installationreference AS sai_num,
            t1.installationcommonname AS name,
            'INSTALLATION' AS inst_type,
            t1.installationtypecode AS type_code,
        FROM sai_raw_data.ai2_data t1
        WHERE t1.installationreference IS NOT NULL)
        UNION
        (SELECT 
            t2.subinstallationreference AS sai_num,
            t2.subinstallationcommonname AS name,
            'SUBINSTALLATION' AS inst_type,
            t2.subinstallationtypecode AS type_code,
        FROM sai_raw_data.ai2_data t2
        WHERE t2.subinstallationreference IS NOT NULL)
        UNION
        (SELECT 
            t2.sitereference AS sai_num,
            t2.sitecommonname AS name,
            'SITE' AS inst_type,
            'SITE' AS type_code,
        FROM sai_raw_data.ai2_data t2
        WHERE t2.sitereference IS NOT NULL)
    ) t
    ORDER BY t.sai_num;
"""

vw_level1_parent_child_results_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_level1_parent_child_results AS 
    SELECT * FROM (
        (SELECT DISTINCT
            t1.site_id AS parent_id,
            t1.child_id AS child_id,
            'SAME' as status,
        FROM s4_sai_mapping.vw_ai2_level1_kids t1
        INTERSECT
        SELECT DISTINCT
            t2.site_floc AS parent_id,
            t2.child_id AS child_id,
            'SAME' as status,
        FROM s4_sai_mapping.vw_s4_level1_kids t2)
        UNION
        (SELECT DISTINCT
            t1.site_id AS parent_id,
            t1.child_id AS child_id,
            'MISSING' as status,
        FROM s4_sai_mapping.vw_ai2_level1_kids t1
        EXCEPT
        SELECT DISTINCT
            t2.site_floc AS parent_id,
            t2.child_id AS child_id,
            'MISSING' as status,
        FROM s4_sai_mapping.vw_s4_level1_kids t2)
        UNION
        (SELECT DISTINCT
            t2.site_floc AS parent_id,
            t2.child_id AS child_id,
            'ALIEN' as status,
        FROM s4_sai_mapping.vw_s4_level1_kids t2    
        EXCEPT
        SELECT DISTINCT
            t1.site_id AS parent_id,
            t1.child_id AS child_id,
            'ALIEN' as status,
        FROM s4_sai_mapping.vw_ai2_level1_kids t1)) t
    ORDER BY t.parent_id, t.child_id;
"""

vw_level1_children_report_ddl = """
    CREATE OR REPLACE VIEW s4_sai_mapping.vw_level1_children_report AS 
    WITH cte_child_status AS (
        (SELECT 
            t1.child_id AS child_id,
            first(t1.child_status) AS status,
        FROM s4_sai_mapping.vw_ai2_level1_kids t1
        GROUP BY t1.child_id)
        UNION 
        (SELECT DISTINCT 
            t2.sitereference AS child_id,
            'OPERATIONAL' AS status,        -- all sites are operational
        FROM
            sai_raw_data.ai2_data t2
        WHERE t2.sitereference IS NOT NULL)
        )
    SELECT 
        t.functional_location AS funcloc,
        t.description_of_functional_location AS floc_name,
        ans.child_id AS child_id,
        tyco.name AS child_name,
        ans.status AS data_status,
        tyco.type_code AS type_code,
        cte.status AS child_asset_status,
    FROM s4_sai_mapping.vw_s4_level1_worklist AS t
    JOIN s4_sai_mapping.vw_level1_parent_child_results ans ON ans.parent_id = t.functional_location 
    JOIN s4_sai_mapping.vw_ai2_installation_type_codes tyco ON tyco.sai_num = ans.child_id 
    JOIN cte_child_status cte ON cte.child_id = ans.child_id
    WHERE tyco.type_code NOT IN ('DAZ', 'TST', 'TSR')
    ORDER BY funcloc, child_id;
"""
